#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Nano Banana —á–µ—Ä–µ–∑ OpenRouter
"""

import requests
import base64
from PIL import Image
from io import BytesIO
import sys

# –í–°–¢–ê–í–¨ –°–í–û–ô API –ö–õ–Æ–ß –°–Æ–î–ê
OPENROUTER_API_KEY = "sk-or-v1-xxxxxxxxxxxxxxx"

def image_to_base64(image_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64"""
    with open(image_path, "rb") as img_file:
        return base64.b64encode(img_file.read()).decode('utf-8')

def send_to_nano_banana(image_base64, prompt):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Nano Banana –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    url = "https://openrouter.ai/api/v1/chat/completions"
    
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "google/gemini-2.5-flash-image",
        "messages": [
            {
                "role": "user",
                "content": [
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/png;base64,{image_base64}"
                        }
                    },
                    {
                        "type": "text",
                        "text": prompt
                    }
                ]
            }
        ]
    }
    
    print(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Nano Banana...")
    print(f"üìù –ü—Ä–æ–º–ø—Ç: {prompt}")
    
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=60)
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return None
        
        result = response.json()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
        # –§–æ—Ä–º–∞—Ç: choices[0].message.images[0].image_url.url
        if "choices" in result and result["choices"]:
            message = result["choices"][0]["message"]
            
            if "images" in message and message["images"]:
                image_url = message["images"][0]["image_url"]["url"]
                
                if "base64," in image_url:
                    base64_data = image_url.split("base64,")[1]
                    print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ!")
                    return base64_data
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç image_url")
                    return None
            else:
                print("‚ùå –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç images")
                print(f"–û—Ç–≤–µ—Ç: {message}")
                return None
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API")
            return None
            
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def test_nano_banana(input_image_path, output_image_path, prompt):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Nano Banana –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
    
    print("="*60)
    print("üçå –¢–ï–°–¢ NANO BANANA")
    print("="*60)
    
    # 1. –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    print(f"\nüìÇ –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {input_image_path}")
    try:
        image = Image.open(input_image_path).convert("RGBA")
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {image.size}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return False
    
    # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    print(f"\nüîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64...")
    buffer = BytesIO()
    image.save(buffer, format="PNG")
    image_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')
    print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ({len(image_base64)} —Å–∏–º–≤–æ–ª–æ–≤)")
    
    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Nano Banana
    print(f"\nüåê –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Nano Banana...")
    result_base64 = send_to_nano_banana(image_base64, prompt)
    
    if not result_base64:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return False
    
    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
    try:
        result_bytes = base64.b64decode(result_base64)
        result_image = Image.open(BytesIO(result_bytes))
        result_image.save(output_image_path)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_image_path}")
        print(f"üìê –†–∞–∑–º–µ—Ä: {result_image.size}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        return False
    
    print("\n" + "="*60)
    print("üéâ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
    print("="*60)
    return True

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_nano_banana.py <–ø—É—Ç—å_–∫_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é> [–≤—ã—Ö–æ–¥–Ω–æ–π_—Ñ–∞–π–ª]")
        print("\n–ü—Ä–∏–º–µ—Ä:")
        print("  python test_nano_banana.py photo.jpg output.png")
        sys.exit(1)
    
    input_path = sys.argv[1]
    output_path = sys.argv[2] if len(sys.argv) > 2 else "nano_banana_result.png"
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
    prompt = """–£–¥–∞–ª–∏ —Ñ–æ–Ω —É –≤—Å–µ—Ö –ª—é–¥–µ–π –∏ —Ñ–∏–≥—É—Ä –Ω–∞ —Ñ–æ—Ç–æ –∏ –ø–æ–º–µ—Å—Ç–∏ –∏—Ö –≤ –º–∏—Ä —Å–æ–≤–µ—Ç—Å–∫–æ–≥–æ –º—É–ª—å—Ç–∏–∫–∞ –ø—Ä–æ –ß–µ–±—É—Ä–∞—à–∫—É. 
–§–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—é—Ç–Ω—ã–º –∏ –¥–æ–±—Ä—ã–º, –≤ —Å—Ç–∏–ª–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π —Å–æ–≤–µ—Ç—Å–∫–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏."""
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    success = test_nano_banana(input_path, output_path, prompt)
    
    sys.exit(0 if success else 1)
